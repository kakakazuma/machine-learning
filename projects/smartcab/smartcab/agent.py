import random
import math
import itertools
from environment import Agent, Environment
from planner import RoutePlanner
from simulator import Simulator

class LearningAgent(Agent):
    """ An agent that learns to drive in the Smartcab world.
        This is the object you will be modifying. """ 

    def __init__(self, env, learning=False, epsilon=1.0, alpha=0.5):
        super(LearningAgent, self).__init__(env)     # Set the agent in the evironment 
        self.planner = RoutePlanner(self.env, self)  # Create a route planner
        self.valid_actions = self.env.valid_actions  # The set of valid actions

        # Set parameters of the learning agent
        self.learning = learning # Whether the agent is expected to learn
        self.Q = dict()          # Create a Q-table which will be a dictionary of tuples
        self.epsilon = epsilon   # Random exploration factor
        self.alpha = alpha       # Learning factor

        ###########
        ## TO DO ##
        ###########
        # Set any additional class parameters as needed
        self.trial_num = 0

    def action_to_key(self, action_str):
        return self.direction_to_number(action_str)

    def state_to_key(self, state):
        key = 'state-'
        for i in range(len(state)):
            if i == 1:
                key += str(self.color_to_number(state[i]))
            else:
                key += str(self.direction_to_number(state[i]))
        return key

    def number_to_direction(self, direction_num):
        if direction_num == 0:
            return None
        elif direction_num == 1:
            return "forward"
        elif direction_num == 2:
            return "left"
        elif direction_num == 3:
            return "right"
        return None

    def direction_to_number(self, direction_str):
        if direction_str is None:
            return 0
        elif direction_str == "forward":
            return 1
        elif direction_str == "left":
            return 2
        elif direction_str == "right":
            return 3
        return 0

    def color_to_number(self, color_str):
        if color_str == "red":
            return 0
        elif color_str == "green":
            return 1
        return 0

    def reset(self, destination=None, testing=False):
        """ The reset function is called at the beginning of each trial.
            'testing' is set to True if testing trials are being used
            once training trials have completed. """

        # Select the destination as the new location to route to
        self.planner.route_to(destination)
        
        ########### 
        ## TO DO ##
        ###########
        # Update epsilon using a decay function of your choice
        # Update additional class parameters as needed
        # If 'testing' is True, set epsilon and alpha to 0
        if testing == True:
            self.epsilon = 0
            self.alpha = 0
        else:
            if self.trial_num > 0:
                self.epsilon = self.epsilon - 0.0025
            self.trial_num += 1
        return None

    def build_state(self):
        """ The build_state function is called when the agent requests data from the 
            environment. The next waypoint, the intersection inputs, and the deadline 
            are all features available to the agent. """

        # Collect data about the environment
        waypoint = self.planner.next_waypoint() # The next waypoint 
        inputs = self.env.sense(self)           # Visual input - intersection light and traffic
        deadline = self.env.get_deadline(self)  # Remaining deadline

        ########### 
        ## TO DO ##
        ###########
        # Set 'state' as a tuple of relevant data for the agent        
        state = (waypoint, inputs['light'], inputs['left'], inputs['oncoming'], inputs['right'])
        return state

    def get_Q_Value(self, state, action):
        action_dict = self.Q[self.state_to_key(state)]
        action_key = self.action_to_key(action)
        return action_dict[action_key]

    def set_Q_Value(self, state, action, value):
        action_dict = self.Q[self.state_to_key(state)]
        action_key = self.action_to_key(action)
        action_dict[action_key] = value
        return

    def get_maxQ(self, state):
        """ The get_max_Q function is called when the agent is asked to find the
            maximum Q-value of all actions based on the 'state' the smartcab is in. """

        ########### 
        ## TO DO ##
        ###########
        # Calculate the maximum Q-value of all actions for a given state
        maxQ = None
        max_value = -1
        for action in self.env.valid_actions:
            q_value = self.get_Q_Value(state, action)
            if q_value > max_value:
                max_value = q_value
                maxQ = action
        return maxQ


    def createQ(self, state):
        """ The createQ function is called when a state is generated by the agent. """

        ########### 
        ## TO DO ##
        ###########
        # When learning, check if the 'state' is not in the Q-table
        # If it is not, create a new dictionary for that state
        #   Then, for each action available, set the initial Q-value to 0.0
        if self.learning == True:
            state_key = self.state_to_key(state)
            if not self.Q.has_key(state_key):
                directions = ["forward", "left", "right", None]
                action_dict = dict()
                for v in directions:
                    #Initialize each Q(s, a) by 0.
                    action_key = self.action_to_key(v)
                    action_dict[action_key] = 0.0
                self.Q[state_key] = action_dict
        return


    def choose_action(self, state):
        """ The choose_action function is called when the agent is asked to choose
            which action to take, based on the 'state' the smartcab is in. """

        # Set the agent state and default action
        self.state = state
        self.next_waypoint = self.planner.next_waypoint()

        ########### 
        ## TO DO ##
        ###########
        # When not learning, choose a random action
        # When learning, choose a random action with 'epsilon' probability
        #   Otherwise, choose an action with the highest Q-value for the current state
        choose_random = True
        if self.learning:
            ran = random.randrange(1000)
            if self.epsilon * 1000 < ran:
                choose_random = False
        if choose_random == True:
            return self.env.valid_actions[random.randrange(len(self.env.valid_actions))]
        else:
            return self.get_maxQ(state)


    def learn(self, state, action, reward):
        """ The learn function is called after the agent completes an action and
            receives an award. This function does not consider future rewards 
            when conducting learning. """

        ########### 
        ## TO DO ##
        ###########
        # When learning, implement the value iteration update rule
        #   Use only the learning rate 'alpha' (do not use the discount factor 'gamma')
        if self.learning == True:
            current_q_value = self.get_Q_Value(state, action)
            new_q_value = current_q_value + self.alpha * (reward - current_q_value)
            self.set_Q_Value(state, action, new_q_value)
        return


    def update(self):
        """ The update function is called when a time step is completed in the 
            environment for a given trial. This function will build the agent
            state, choose an action, receive a reward, and learn if enabled. """

        state = self.build_state()          # Get current state
        self.createQ(state)                 # Create 'state' in Q-table
        action = self.choose_action(state)  # Choose an action
        reward = self.env.act(self, action) # Receive a reward
        self.learn(state, action, reward)   # Q-learn

        return
        

def run():
    """ Driving function for running the simulation. 
        Press ESC to close the simulation, or [SPACE] to pause the simulation. """

    ##############
    # Create the environment
    # Flags:
    #   verbose     - set to True to display additional output from the simulation
    #   num_dummies - discrete number of dummy agents in the environment, default is 100
    #   grid_size   - discrete number of intersections (columns, rows), default is (8, 6)
    env = Environment()
    
    ##############
    # Create the driving agent
    # Flags:
    #   learning   - set to True to force the driving agent to use Q-learning
    #    * epsilon - continuous value for the exploration factor, default is 1
    #    * alpha   - continuous value for the learning rate, default is 0.5
    agent = env.create_agent(LearningAgent, learning=False, alpha=0.5)
    
    ##############
    # Follow the driving agent
    # Flags:
    #   enforce_deadline - set to True to enforce a deadline metric
    env.set_primary_agent(agent, enforce_deadline=True)

    ##############
    # Create the simulation
    # Flags:
    #   update_delay - continuous time (in seconds) between actions, default is 2.0 seconds
    #   display      - set to False to disable the GUI if PyGame is enabled
    #   log_metrics  - set to True to log trial and simulation results to /logs
    #   optimized    - set to True to change the default log file name
    sim = Simulator(env, update_delay=0.001, log_metrics=True, display=False, optimized=True)
    
    ##############
    # Run the simulator
    # Flags:
    #   tolerance  - epsilon tolerance before beginning testing, default is 0.05 
    #   n_test     - discrete number of testing trials to perform, default is 0
    sim.run(n_test=10, tolerance=0.01)


if __name__ == '__main__':
    run()
